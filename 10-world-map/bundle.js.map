{"version":3,"file":"bundle.js","sources":["useWorldAtlas.js","useCities.js","Marks.js","index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson';\n\nconst jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json'\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const { countries, land } = topology.objects;\n    \tsetData({\n        land: feature(topology, land),\n        interiors: mesh(topology, countries, (a, b) => a !== b)\n      })\n    });\n  }, []);\n  \n  return data;\n};\n","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nconst csvUrl = 'https://gist.githubusercontent.com/curran/13d30e855d48cdd6f22acdf0afe27286/raw/0635f14817ec634833bb904a47594cc2f5f9dbf8/worldcities_clean.csv';\n\nconst row = d => {\n\td.lat = +d.lat;\n  d.lng = +d.lng;\n  d.population = +d.population;\n  return d;\n};\n\nexport const useCities = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl, row).then(setData);\n  }, []);\n  \n  return data;\n};\n","import {\n  geoNaturalEarth1,\n  geoPath,\n  geoGraticule,\n} from 'd3';\n\nconst projection = geoNaturalEarth1();\nconst path = geoPath(projection);\nconst graticule = geoGraticule();\n\nexport const Marks = ({\n  worldAtlas: { land, interiors },\n  cities,\n  sizeScale,\n  sizeValue,\n}) => (\n  <g className=\"marks\">\n    <path className=\"sphere\" d={path({ type: 'Sphere' })} />\n    <path className=\"graticule\" d={path(graticule())} />\n    {land.features.map((feature) => (\n      <path className=\"land\" d={path(feature)} />\n    ))}\n    <path className=\"interiors\" d={path(interiors)} />\n    {cities.map((d) => {\n      const [x, y] = projection([d.lng, d.lat]);\n      return (\n        <circle cx={x} cy={y} r={sizeScale(sizeValue(d))} />\n      );\n    })}\n  </g>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { scaleSqrt, max } from 'd3';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport { useCities } from './useCities';\nimport { Marks } from './Marks';\n\nconst width = 960;\nconst height = 500;\n\nconst App = () => {\n  const worldAtlas = useWorldAtlas();\n  const cities = useCities();\n\n  if (!worldAtlas || !cities) {\n    return <pre>Loading....</pre>;\n  }\n\n  const sizeValue = (d) => d.population;\n  const maxRadius = 15;\n\n  const sizeScale = scaleSqrt()\n    .domain([0, max(cities, sizeValue)])\n    .range([0, maxRadius]);\n\n  return (\n    <svg width={width} height={height}>\n      <Marks\n        worldAtlas={worldAtlas}\n        cities={cities}\n        sizeScale={sizeScale}\n        sizeValue={sizeValue}\n      />\n    </svg>\n  );\n};\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"names":["const","useState","useEffect","json","feature","mesh","csv","geoNaturalEarth1","geoPath","geoGraticule","React","scaleSqrt","max","ReactDOM"],"mappings":"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"}