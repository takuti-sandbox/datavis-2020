{"version":3,"file":"bundle.js","sources":["useWorldAtlas.js","useData.js","useCodes.js","Marks.js","index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson';\n\nconst jsonUrl =\n  'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';\n\nexport const useWorldAtlas = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    json(jsonUrl).then((topology) => {\n      const { countries, land } = topology.objects;\n      setData({\n        countries: feature(topology, countries),\n        interiors: mesh(\n          topology,\n          countries,\n          (a, b) => a !== b\n        ),\n      });\n    });\n  }, []);\n\n  return data;\n};\n","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nconst csvUrl =\n  'https://gist.githubusercontent.com/curran/470752f12c027f8ff4266e7c96f26a56/raw/66908b56e371e7c9f5a1c0911ac3250f570a4c83/share-of-population-infected-with-hiv-ihme.csv';\n\nconst row = (d) => {\n  d.aids = +d[\n    'Prevalence - HIV/AIDS - Sex: Both - Age: 15-49 years (Percent) (%)'\n  ];\n  return d;\n};\n\nexport const useData = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl, row).then(setData);\n  }, []);\n\n  return data;\n};\n","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nconst csvUrl =\n  'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-3/slim-3.csv';\n\nexport const useCodes = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import {\n  geoNaturalEarth1,\n  geoPath,\n  geoGraticule,\n} from 'd3';\n\nconst projection = geoNaturalEarth1();\nconst path = geoPath(projection);\nconst graticule = geoGraticule();\n\nconst missingDataColor = 'gray';\n\nexport const Marks = ({\n  worldAtlas: { countries, interiors },\n  rowByNumericCode,\n  colorScale,\n  colorValue,\n}) => (\n  <g className=\"marks\">\n    <path className=\"sphere\" d={path({ type: 'Sphere' })} />\n    <path className=\"graticule\" d={path(graticule())} />\n    {countries.features.map((feature) => {\n      const d = rowByNumericCode.get(feature.id);\n      return (\n        <path\n          fill={\n            d ? colorScale(colorValue(d)) : missingDataColor\n          }\n          d={path(feature)}\n        />\n      );\n    })}\n    <path className=\"interiors\" d={path(interiors)} />\n  </g>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  interpolateYlOrRd,\n  scaleSequential,\n  max,\n} from 'd3';\nimport { useWorldAtlas } from './useWorldAtlas';\nimport { useData } from './useData';\nimport { useCodes } from './useCodes';\nimport { Marks } from './Marks';\n\nconst width = 960;\nconst height = 500;\n\nconst selectedYear = '2017';\n\nconst App = () => {\n  const worldAtlas = useWorldAtlas();\n  const data = useData();\n  const codes = useCodes();\n\n  if (!worldAtlas || !data || !codes) {\n    return <pre>Loading....</pre>;\n  }\n\n  const numericCodeByAlpha3Code = new Map();\n  codes.forEach((code) => {\n    numericCodeByAlpha3Code.set(\n      code['alpha-3'],\n      code['country-code']\n    );\n  });\n\n  const filteredData = data.filter(\n    (d) => d.Year === selectedYear\n  );\n\n  const rowByNumericCode = new Map();\n  filteredData.forEach((d) => {\n    const alpha3Code = d.Code;\n    const numericCode = numericCodeByAlpha3Code.get(\n      alpha3Code\n    );\n    rowByNumericCode.set(numericCode, d);\n  });\n\n  const colorValue = (d) => d.aids;\n\n  const colorScale = scaleSequential(\n    interpolateYlOrRd\n  ).domain([0, max(data, colorValue)]);\n\n  return (\n    <svg width={width} height={height}>\n      <Marks\n        worldAtlas={worldAtlas}\n        rowByNumericCode={rowByNumericCode}\n        colorScale={colorScale}\n        colorValue={colorValue}\n      />\n    </svg>\n  );\n};\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"names":["const","useState","useEffect","json","feature","mesh","csv","csvUrl","geoNaturalEarth1","geoPath","geoGraticule","React","scaleSequential","interpolateYlOrRd","max","ReactDOM"],"mappings":"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"}